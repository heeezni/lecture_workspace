
1. 클래스가 객체를 설계한 것이라면, 실행 타임(=Runtime)시 메모리에 올라가는 객체 한 단위를 (인스턴스)라고 한다.

2. Car a=new Car() 에서 a 변수에는 객체의 주소값이 담겨 있다. 이렇게 객체의 주소값을 가지는 변수를 (레퍼런스) 변수라고 한다.

3. 객체 생성 후 프로그래머가 따로 메모리 관리를 해주지 않아도 자동으로 사용되지 않는 인스턴스들을 소멸시키는 
	JVM의 메모리 청소 기능을 (garbage collection)이라 한다.
	
4. 메인 메서드는 개발자가 직접 호출 할 수 없으며 명령 프롬프트에서 (java.exe) 파일 실행 시 자동 호출된다.

5. 레퍼런스 변수 값을 출력해보면 @ 형태의 데이터가 출력되는데, 이것은 객체 자체의 값이 아니라 그 객체의 (주소) 값이다.

6. 클래스로부터 생성되는 인스턴스가 메모리에 올라갈 때 클래스에 작성된 (멤버)변수 중 인스턴스 변수는 각각의 인스턴스 마다 할당되어진다.

7. JVM 도 프로그램 이므로 (OS)로 부터 메모리를 할당 받아 사용한다. 이때 JVM 에서는 메모리 영역을 크게 (메서드 (static)), (스택), (힙) 영역으로
     분리하여 운영한다
8. 객체 생성 시 프로그래머의 의도와는 상관없이 new 연산자 뒤에서 무조건 호출되는 메서드를 (생성자 메서드)라고 하는데, 
	반드시 클래스명과 명칭이 동일해야 하며, 절대로 반환형을 두어서는 안된다
	
9. 현실의 사물을 객체(=오브젝트)을 Java 언어로 모델링 한 설계도를 (클래스)라 하며, 
	이로 부터 메모리에 생성된 객체 한 단위를 (인스턴스)라 한다.
	
10. 같은 클래스 내에 작성된 변수를 (멤버) 변수, 메서드를 (멤버) 메서드라 한다.

11. 클래스 코드는 JVM 메모리 영역 중 (메서드) 영역에 로드 되는데 , 로드 시점은 클래스를 (실행할 때)이다.

12. 모든 메서드 내의 매개변수를 포함한 지역변수는 메서드 호출 시 JVM의 메모리 영역 중 (Stack) 영역에 생성 및 관리된다

13. Car a = new Car() 에 의해 생성된 Car 객체의 인스턴스는 JVM의 메모리 영역 중 (heap) 영역에 생성 및 관리된다
